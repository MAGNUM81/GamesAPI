#%RAML 1.0
traits:
  isLogin:
    headers:
      Authorization:
        displayName: Authorization
        description: Chaine de charactères de format `email;password`
        type: string
        required: true
    responses:
      200:
        headers:
          Authorization:
            displayName: Authorization
            description: Chaine de charactères contenant le token de session
            type: string
  hasRestrictedAccess:
    headers:
      Authorization:
        displayName: Authorization
        description: Token obtenu via un Login réussi. Valide pendant 10 minutes.
        type: bearer token
        required: true
    responses:
      400:
        description: La ressource demandée n'existe pas
        body:
          application/json:
            example: |
              {
                  "Error": "resource does not exist"
              }
      403:
        description: L'action à effectuer sur une ressource n'est pas autorisée pour le rôle de l'usager
        body:
          application/json:
            description: erreur lors de l'accès à un chemin restreint
            type: string
            example: |
              {
                "Error" : "query rule violation: ensure 'userId' = '<nil>', instead got: ''"
              }
  hasAPIKey:
    headers:
      x-api-key:
        displayName: x-api-key
        description: Clé d'API obtenue auprès du support de GamesAPI
        type: string
        required: true
  throwsEntityError:
    responses:
      400:
        body:
          application/json:
            example: |
              {
                "Message"?: "entity id should be a number",
                "Status"?: 400,
                "Error": "bad_request"
              }
      404:
        body:
          application/json:
            example: |
              {
                "Message"?: "entity was not found",
                "Status"?: 400,
                "Error": "not_found"
              }
      422:
        body:
          application/json:
            example: |
              {
                "Message"?: "invalid json body",
                "Status"?: 422,
                "Error": "invalid_request"
              }
      500:
        body:
          application/json:
            example: |
              {
                "Message": "error updating entity",
                "Status": 500,
                "Error": "server_error"
              }
title: Game API
baseUri: "http://localhost:8080/"
/:
  displayName: Salutations
  get:
    is: [ hasAPIKey, hasRestrictedAccess ]
    description: Salue l'usager
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "Message":"Welcome to GamesAPI!"
              }

/auth:
  displayName: Authentification
  /login:
    post:
      is: [ hasAPIKey, isLogin ]
      description: Obtenir un token de session afin de s'authentifier lors des prochains appels à des chemins restreints.

/users:
  displayName: Usagers
  get:
    is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
    description: fetch tous les usagers
    responses:
      200:
        body:
          application/json:
            example: |
              [
                  {
                      "id": 1,
                      "created_at": "2020-12-02T19:17:33.7768138-05:00",
                      "updated_at": "2020-12-02T19:17:33.7768138-05:00",
                      "deleted_at": null,
                      "name": "master",
                      "email": "master@test.com",
                      "password_hash": "$2a$10$oT9RIIgxLsOPZZts7SEgV.2drgixOViVxRgRpQHfW6YeQYnDAriAC",
                      "steam_user_id": "nullid"
                  },
                  ...
              ]
  post:
    is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
    description: créer un usager
    body:
      application/json:
        example: |
          {
              "email":"dev2@test.com",
              "name":"dev2",
              "role":"admin",
              "password":"network7"
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                  "id": 2,
                  "created_at": "2020-12-02T19:18:07.2384662-05:00",
                  "updated_at": "2020-12-02T19:18:07.2384662-05:00",
                  "deleted_at": null,
                  "name": "dev2",
                  "email": "dev2@test.com",
                  "password_hash": "$2a$10$neYZjTwKSxgNV9VIftEM4eqoyUD/XfnEMWH4q.KCKe7oVMiHBVRly",
                  "steam_user_id": "nullid"
              }
  /{id}:
    get:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
      description: fetch un usager en particulier
    patch:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
      description: MAJ un usager en particulier
    delete:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
      description: supprimer un usager en particulier

/games:
  displayName: Jeux
  get:
    is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
  post:
    is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
  /{id}:
    get:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
      responses:
        200:
          body:
            application/json:
              example: |
                {
                    "id": 1,
                    "created_at": "2020-12-02T23:21:12.5631303-05:00",
                    "updated_at": "2020-12-02T23:21:12.5631303-05:00",
                    "deleted_at": null,
                    "title": "Subnautica",
                    "developer": "Whatever",
                    "publisher": "OK",
                    "releaseDate": "0001-01-01T00:00:00Z",
                    "steam_id": ""
                }

    patch:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
    delete:
      is: [ hasAPIKey, hasRestrictedAccess, throwsEntityError ]
/LinkSteamUser:
  displayName: Associer un User ID Steam
  post:
    is: [ hasAPIKey, hasRestrictedAccess ]

/SyncGames:
  displayName: Synchronisation de jeux
  post:
    is: [ hasAPIKey, hasRestrictedAccess ]



